divert(-1)
/*
 * This file is part of OpenGFX+ Trains.
 * OpenGFX+ Trains is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenGFX+ Trains is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenGFX+ Trains. If not, see <http://www.gnu.org/licenses/>.
 */

# Set the quotes, whatever the current quoting system.
changequote()
changequote([, ])

# Make sure we are using GNU M4 or error and exit.
ifdef([__gnu__], [], [errprint([OpenGFX+ Trains requires GNU M4. Install it before preprocessing or
set the M4 environment variable to its absolute file name.
])m4exit(2)])

# Check if we have already been included
ifdef([included_]__file__, [errprint(__file__[ has already been included.
])m4exit(1)])

# Register ourself as being included
define([included_]__file__)

#############################################################################################
# forloop (var, from, to, stmt) - refactored to share code.
# Takes the name in iterator, which must be a valid macro name, and successively assign it
# each integer value from start to end, inclusive. For each assignment to iterator, append
# text to the expansion of the forloop. text may refer to iterator. Any definition of
# iterator prior to this invocation is restored.
#############################################################################################
define([forloop],
    [ifelse(eval([($2) <= ($3)]), [1],
        [pushdef([$1])_forloop(eval([$2]), eval([$3]), [define([$1],], [)$4])popdef([$1])])])
define([_forloop],
    [$3[$1]$4[]ifelse([$1], [$2],
        [],
        [$0(incr([$1]), [$2], [$3], [$4])])])

#############################################################################################
# foreachq (iterator, quote-list, text)
# Takes the name in iterator, which must be a valid macro name, and successively assign it
# each value from paren-list or quote-list. In foreach, paren-list is a comma-separated list
# of elements contained in parentheses. In foreachq, quote-list is a comma-separated list of
# elements contained in a quoted string. For each assignment to iterator, append text to the
# overall expansion. text may refer to iterator. Any definition of iterator prior to this
# invocation is restored.
#############################################################################################
define([foreachq],
    [ifelse([$2], [],
        [],
        [pushdef([$1])_$0([$1], [$3], [], $2)popdef([$1])])])
define([_foreachq],
    [ifelse([$#], [3],
        [],
        [define([$1], [$4])$2[]$0([$1], [$2], shift(shift(shift($@))))])])

#############################################################################################
# join ([separator], [args...])
# Generate a single-quoted string, consisting of each arg separated by separator.
# Join avoids the separator for an empty arg.
#############################################################################################
define([join],
    [ifelse([$#], [2],
        [[$2]],
        [ifelse([$2], [], [], [[$2]_])$0([$1], shift(shift($@)))])])
define([_join],
    [ifelse([$#$2], [2],
        [],
        [ifelse([$2], [],
            [],
            [[$1$2]])$0([$1], shift(shift($@)))])])

#############################################################################################
# quote(args) - convert args to single-quoted string
# Takes any number of arguments, and adds quoting. With quote, only one level of quoting is
# added, effectively removing whitespace after commas and turning multiple arguments into a
# single string.
#############################################################################################
define([quote], [ifelse([$#], [0], [], [[$*]])])

#############################################################################################
# _nl (text)
# If text is not empty, return text and a new line, otherwise nothing.
#############################################################################################
define([_nl], [ifelse([$1], [], [],[$1
])])

#############################################################################################
# _nlf (text)
# If text is not empty, return a new line and text, otherwise nothing.
#############################################################################################
define([_nlf], [ifelse([$1], [], [],[
$1])])

#############################################################################################
# exit_with_error (message, ...)
# Prints message and the rest of the arguments to standard error, separated by spaces, then exit.
# Standard error is used, regardless of the --debugfile option
#############################################################################################
define([exit_with_error],
    [errprint(ifdef([__program__], [__program__], [[m4]]):ifelse(__line__, [0],
        [],
        [__file__:__line__:])_nl([$@]))m4exit(1)])

#############################################################################################
# arg_count (args...)
# Return a count of how many args are present.
#############################################################################################
define([arg_count], [$#])

#############################################################################################
# check_args_exact (macro-name, arg-count, required-arg-count)
# Check that the number of args matches exactly the required number otherwise
# throw an error and exit.
#############################################################################################
define([check_args_exact],
    [ifelse([$2], [$3],
        [],
        [exit_with_error([$1: Requires $3 arguments but received $2.])])])

#############################################################################################
# _counter_def [([init-counter-value])]
# For internal use in other macros, not for direct use but a macro that can be copied.
# Provides a method for (re)setting and counting iterations.
# Example of use in another macro:
# define([$0_mycounter], defn([_counter_def])) - defines a copy of the counter macro
# $0_mycounter([10]) - sets the counter value to 10
# $0_mycounter - increments the counter value by 1 and returns the current counter value
# $0_mycounter() - increments the counter value by 1 silently
#############################################################################################
define([_counter_def],
    [ifelse([$#], [0],
        [ifdef([$0_counter], [],
            [define([$0_counter], [0])])define([$0_counter], incr($0_counter))$0_counter],
        [ifelse([$1], [],
            [ifdef([$0_counter], [],
                [define([$0_counter], [0])])define([$0_counter], incr($0_counter))],
            [define([$0_counter], [$1])])])])

#############################################################################################
# list_to_columns (number-columns, number-leading-spaces, quoted-list)
# Formats a quoted list into a number of columns. The first line of the list is not preceeded
# by any spaces but all following lines are preceeded by the number of leading spaces.
# Items are sperated with a comma(,) and a space( ). The last item has no tailing characters.
# Items are counted from the first item in the list and every number of columns the line is
# broken by a new-line.
#############################################################################################
define([list_to_columns],
[check_args_exact([$0], [$#], [3])dnl
define([$0_column], defn([_counter_def]))$0_column([-1])dnl
define([$0_item], defn([_counter_def]))$0_item([0])dnl
foreachq([x], [$3],
    [ifelse($0_column, [$1],
        [$0_column([0])_nlf([forloop([y], [1], [$2], [ ])])])ifelse($0_item, arg_count($3),
            [x],
            [x, ])])dnl
undefine([$0_column])undefine([$0_item])])

#############################################################################################
# define_unique (macro-name, [args])
# The same a the default 'define' except that it checks to make sure that the macro name is
# unique, if not then it exits with an error.
#############################################################################################
define([define_unique], [ifdef([$1], [exit_with_error([Already defined:$1:]$1)], [define($@)])])])

#############################################################################################
# include_registered (file)
# The same a the default 'include' except that it registers the file for use with
# include_unique and requires.
#############################################################################################
define([include_registered], [check_args_exact([$0], [$#], [1])include([$1])define([included_[$1]])])

#############################################################################################
# include_unique (file)
# The same a the default 'include' except that it checks to make sure that the file name
# included is unique, if not then it exits with an error.
#############################################################################################
define([include_unique], [check_args_exact([$0], [$#], [1])dnl
ifdef([included_[$1]],
    [exit_with_error([File aready included:$1])],
    [include_registered([$1])])])

#############################################################################################
# check_included (file)
# Throws an error if the required file has not been include_registered.
#############################################################################################
define([check_included], [check_args_exact([$0], [$#], [1])dnl
ifdef([included_[$1]],
    [],
    [exit_with_error([Required file not included:$1])])])

#############################################################################################
# check_defined (macro-name)
# Checks to make sure that a macro name is defined otherwise exits with an error.
# Used to make sure that _THIS_ENGINE, _THIS_WAGON and _CNAME is defined.
#############################################################################################
define([check_defined], [check_args_exact([$0], [$#], [1])dnl
ifdef([$1], [], [exit_with_error([Required macro is not defined for $0.])])])

#############################################################################################
# _THIS_ID ([args...])
# Creates an identifier by joining the provided arguments with an underscore (_) character.
#############################################################################################
define([_THIS_ID], [join([_], $@)])

divert
